# configuration file for git-cliff
# see https://github.com/orhun/git-cliff#configuration-file

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

<!-- markdownlint-disable no-duplicate-header -->
<!-- markdownlint-disable no-trailing-spaces -->
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    {% if previous.version -%}
        {% set url = "<REPO>/compare/" ~ previous.version ~ "..." ~ version %}
    {% else -%}
        {% set url = "<REPO>/releases/tag/" ~ version %}
    {% endif -%}
    ## [{{ version | trim_start_matches(pat="v") }}]({{ url }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## Unreleased
{% endif -%}

{% macro commit(commit) -%}
{% set id = commit.id | truncate(length=7, end="") -%}
{% set url = "<REPO>/commit/" ~ commit.id -%}

- {% if commit.breaking %}[**breaking**] {% endif -%}
  {% if commit.scope %}_{{ commit.scope }}_: {% endif -%}
  {{ commit.message | upper_first }} ([{{ id }}]({{ url }}))
    {%- if commit.body %}
    {{ commit.body | indent(prefix="  > ", first=true, blank=true) }}
    {%- endif -%}
{% endmacro -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}

    {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") -%}
        {{ self::commit(commit=commit) }}
    {% endfor -%}
    {% for commit in commits -%}
        {% if not commit.scope -%}
            {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """

<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/dnaka91/llvm-cov-pretty" }, # replace repository URL
    { pattern = '<!-- \d+ -->', replace = "" },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" }, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->⛰️ Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^doc", group = "<!-- 2 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 3 -->⚡ Performance" },
    { message = "^refactor", group = "<!-- 4 -->🚜 Refactor" },
    { message = "^style", group = "<!-- 5 -->🎨 Styling" },
    { message = "^test", group = "<!-- 6 -->🧪 Testing" },
    { message = '^chore\(release\): [pP]repare for', skip = true },
    { message = '^chore\(deps\)', skip = true },
    { message = '^chore\(pr\)', skip = true },
    { message = '^chore\(pull\)', skip = true },
    { message = '^chore\(fmt\)', skip = true },
    { message = "^chore|ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
    { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "alpha|beta"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
